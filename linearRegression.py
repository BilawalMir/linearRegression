# -*- coding: utf-8 -*-
"""second model trained linear reg

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wNIS3xla1lc5HCShLQwEmMZ-VUZES4z7
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import sklearn
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
plt.rcParams["figure.figsize"] = [10,5]
# Ignore warnings

import warnings
# Set the warning filter to ignore FutureWarning
warnings.simplefilter(action = "ignore", category = FutureWarning)

full_data = pd.read_csv('/content/USA_Housing.csv')

full_data.shape

full_data.head(5)

full_data.info()

full_data.drop('Address',axis = 1 ,inplace  = True)

full_data.info()

sns.heatmap(full_data.isnull(),yticklabels=False, cbar = False, cmap = "tab20c_r").set_title("Missing Data")
plt.show()

full_data.dropna(inplace = True)

full_data

x = full_data.drop("Price", axis = 1)

y = full_data["Price"]

from sklearn.model_selection import train_test_split
x_train , x_test , y_train , y_test = train_test_split(x , y , test_size = .20 , random_state = 101)

from sklearn.linear_model import LinearRegression
lreg = LinearRegression()
lreg.fit(x_train,y_train)

y_predict =lreg.predict(x_test)
y_predict.shape
y_predict

result = np.column_stack((y_test,y_predict))

result

residual = y_test - y_predict
print(residual)

sns.distplot(residual,kde = True)

sns.scatterplot(x=y_test, y=y_predict, color='blue', label='Actual Data points')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', label='Ideal Line')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual (Linear Regression)')
plt.legend()
plt.show()

from sklearn.metrics import mean_squared_error

mean = mean_squared_error(y_test , y_predict)
rmean = np.sqrt(mean)
print(mean)
print(rmean)

